Course Number,Course Name,Credit Hours,DescriptionCS6210,Advanced OS,3,"Advanced Operating Systems is a graduate-level course that addresses a broad range of topics in operating system design and implementation, including:<br> operating system structuring, synchronization, communication and scheduling in parallel systems, Distributed systems, their communication mechanisms, distributed objects and middleware, failures and recovery management, system support for internet-scale computing.<br> By tracing the key ideas of today's most popular systems to their origins in research, the class highlights key developments in operating system design over the last two decades and illustrates how insight has evolved to implementation. "CS6250,Computer Networks,3,"This project-based course will explore research topics in computer networking, primarily at the IP layer and above. Students will gain exposure to burgeoning areas of computer networking and learn how to use the tools commonly used for networking research today. "CS6300,Software Development Process,3,"This course provides an in-depth study of the process of developing software systems, including the use of software processes in actual product development, techniques used to ensure quality of the software products and maintenance tasks performed as software evolves. By the end of the course, students will understand the role of software processes in the development of software and will have experienced several types of processes, from rigid to agile. Students will also become familiar with a variety of modern technologies and development techniques and understand their connection to software processes. "CS7641,Machine Learning,3,"This is a 3-course Machine Learning Series that covers supervised learning, unsupervised learning, and reinforcement learning. <br><b>Supervised Learning</b><br>Supervised Learning is a machine learning task that makes it possible for your phone to recognize your voice, your email to filter spam, and for computers to learn a number of fascinating things. This sort of machine learning task is an important component in all kinds of technologies. From stopping credit card fraud; to finding faces in camera images; to recognizing spoken language -- our goal is to give students the skills they need to apply supervised learning to these technologies and interpret their output. This is especially important for solving a range of data science problems.<br><b>Unsupervised Learning</b><br>Ever wonder how Netflix can predict what movies you'll like? Or how Amazon knows what you want to buy, before you make a purchase? The answer can be found in Unsupervised Learning. Closely related to pattern recognition, Unsupervised Learning is about analyzing data and looking for patterns. It is an extremely powerful tool for identifying structure in data. This course focuses on how students can use Unsupervised Learning approaches -- including randomized optimization, clustering, and feature selection and transformation -- to find structure in unlabeled data.<br><b>Reinforcement Learning</b><br>Reinforcement Learning is the area of Machine Learning concerned with the actions that software agents ought to take in a particular environment in order to maximize rewards. You can apply Reinforcement Learning to robot control, chess, backgammon, checkers and other activities that a software agent can learn. Reinforcement Learning uses behaviorist psychology in order to achieve reward maximization."CS8803-001,Artifcial Intelligence for Robotics,3,"In Artificial Intelligence for Robotics, learn from the leader of Google and Stanford's autonomous driving team, how to program all the major systems of a robotic car. This class will teach students basic methods in Artificial Intelligence, including: probabilistic inference, planning and search, localization, tracking and control, all with a focus on robotics. Extensive programming examples and assignments will apply these methods in the context of building self-driving cars. <br>At the end of the course, students will leverage what they have learned by solving the problem of a runaway robot that they must chase and hunt down! Students will also be expected to complete six problem sets, and deliver a final project that applies one of the methods learned in this class on a dataset of their choosing."CS6290,High Performance Computer Architecture,3,"This course covers modern computer architecture, including branch prediction, out-of-order instruction execution, cache optimizations, multi-level caches, memory and storage, cache coherence and consistency, and multi- and many-core processors."CS6310,Software Architecture and Design,3,"Software Architecture and Design will provide students with the principles and concepts involved in the analysis and design of large software systems. The learning objectives for the course are the following: <br>understand and apply object-oriented design techniques, develop and evaluate software architectures, select and use appropriate architectural styles, select and use appropriate software design patters, express the specifications and design of an application using UML, specify parts of the design using a formal design language (OCL)"CS6440,Intro to Health Informatics,3,"Intro to Health Informatics (CS 6440) is designed so that students with a variety of backgrounds can gain basic proficiency in health informatics. Health informatics encompasses the application of computing to healthcare delivery; population and public health; community-based clinical research; and the potential for big data and analytics to transform the field. This is distinct from the related field of bioinformatics, which explores the role of computing in understanding the genomic and proteomic processes within cells.<br>During CS 6440 students will follow a make-believe patient whose digital record they will download and use to complete a variety of exercises and projects designed to provide a hands-on experience with state-of-the-art health informatics tools and systems."CS6505,"Computability, Complexity and Algorithms",3,"This course will cover important concepts from computability theory; techniques for designing efficient algorithms for combinatorial, algebraic, and number-theoretic problems; and basic concepts such as NP-Completeness from computational complexity theory."CS7637,Knowledge-Based AI: Cognitive Science,3,"The twin goals of knowledge-based artificial intelligence (AI) are to build AI agents capable of human-level intelligence and gain insights into human cognition.<br>The learning goals of the Knowledge-Based AI course are to develop an understanding of (1) the basic architectures, representations and techniques for building knowledge-based AI agents, and (2) issues and methods of knowledge-based AI. The main learning strategies are learning-by-example and learning-by-doing. Thus, the course puts a strong emphasis on homework assignments and programming projects. The course will cover three kinds of topics: (1) core topics such as knowledge representation, planning, constraint satisfaction, case-based reasoning, knowledge revision, incremental concept learning, and explanation-based learning, (2) common tasks such as classification, diagnosis, and design, and (3) advanced topics such as analogical reasoning, visual reasoning, and meta-reasoning."CS4495,Computer Vision,3,"This course provides an introduction to computer vision including fundamentals of image formation, camera imaging geometry, feature detection and matching, multiview geometry including stereo, motion estimation and tracking, and classification. We’ll develop basic methods for applications that include finding known models in images, depth recovery from stereo, camera calibration, image stabilization, automated alignment (e.g. panoramas), tracking, and action recognition.<br>The focus of the course is to develop the intuitions and mathematics of the methods in lecture, and then to learn about the difference between theory and practice in the problem sets. All algorithms work perfectly in the slides. But remember what Yogi Berra said: In theory there is no difference between theory and practice. In practice there is.<br>In general we will not make use of image and vision libraries until first understanding (and often coding) the basic methods. You should be comfortable writing code that reflects mathematics, coding a variety of data structures, and comparing them to find evaluate different hypotheses."CS6475,Computational Photography,3,"Students should be familiar with college-level mathematics (knowledge of matrices, vectors, differentiation and integration), physics (vectors, optics) and probability (probability density functions). In addition to this, students should have working knowledge of computer programming, the course will focus on using Python for its programming assignments."CS8803-002,Introduction to OS,3,"Introduction to Operating Systems is a graduate-level introductory course in operating systems. This course teaches basic operating system abstractions, mechanisms, and their implementations. The core of the course focuses on OS support for concurrency (threads) and synchronization, resource management (CPU, memory, I/O), and distributed services. The practical component of the course teaches multithread programming, inter-process communication, and distributed interactions via RPC."CS6035,Introduction to Information Security,3,"Introduction to Information Security is a graduate-level introductory course in information security. It teaches the basic concepts and principles of information security, and the fundamental approaches to secure computers and networks. Its main topics include: security basics, security management and risk assessment, software security, operating systems security, database security, cryptography algorithms and protocols, network authentication and secure network applications, malicious malware, network threats and defenses, web security, mobile security, legal and ethical issues, and privacy."CS8803 ,Special Topics: Reinforcement Learning,3,"Through a combination of classic papers and more recent work, the course explores automated decision making from a computational perspective. It examines efficient algorithms, where they exist, for single agent and multiagent planning as well as approaches to learning near-optimal decisions from experience.<br>Topics include Markov decision processes, stochastic and repeated games, partially observable Markov decision processes, and reinforcement learning. Of particular interest will be issues of generalization, exploration, and representation. Students will replicate a result in a published paper in the area."CSE8803,Special Topics: Big Data for Health Informatics,3,"Data science plays an important role in many industries. In facing massive amount of heterogeneous data, scalable machine learning and data mining algorithms and systems become extremely important for data scientists. The growth of volume, complexity and speed in data drives the need for scalable data analytic algorithms and systems. In this course, we study such algorithms and systems in the context of healthcare applications.<br>In healthcare, large amounts of heterogeneous medical data have become available in various healthcare organizations (payers, providers, pharmaceuticals). Those data could be an enabling resource for deriving insights for improving care delivery and reducing waste. The enormity and complexity of these datasets present great challenges in analyses and subsequent applications to a practical clinical environment. In this course, we introduce the characteristics of medical data and associated data mining challenges on dealing with such data. We cover various algorithms and systems for big data analytics. We focus on studying those big data techniques in the context of concrete healthcare analytic applications such as predictive modeling, computational phenotyping and patient similarity.<br>We focus on studying those big data techniques in the context of concrete healthcare analytic applications such as:1. Predictive modeling: e.g., how to predict disease risks on individual patients?2. Computational phenotyping: e.g., how to convert patient data from electronic health records into meaningful clinical concepts (phenotypes)?3. Patient similarity: e.g., how to measure similarity between patients within a specific context?<br>We also study big data analytic technology:1. Scalable machine learning algorithms such as online learning and fast similarity search;2. Big data analytic systemsa. Hadoop family (MapReduce, Hive, Pig, HBase)b. Spark (SparkSQL, MLlib and GraphX)"